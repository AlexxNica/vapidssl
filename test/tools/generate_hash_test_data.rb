#! /usr/bin/ruby

# Copyright 2016 The Fuchsia Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'digest'

# Two separate tests depend on the data produced here in different ways:
#
#  * crypto/hash_unittests.cc uses the fact that
#       |digest| = Hash(|in|)
#    to check the correctness of hash algorithms.
#
#  * common/stream_unittests.cc uses the fact that
#       |in[n]| = |digest[0]| + |digest[1]| + ... + |digest[n-1]|
#    to send n-1 digests resulting in a stream digest equaling |digest[n]|.

ALGS = {
  "sha256_tests.txt" => Digest::SHA256.new,
  "sha384_tests.txt" => Digest::SHA384.new,
}

# Main routine: Take self-signed certificates in <cert-dir> and use them to
# generate test data files in <test-dir>
if ARGV.length != 1
  puts "[-] usage: #{$0} <test-dir>"
  exit 1
end

# Truncate any existing test data files and add an informative header
tool = File.expand_path($0).gsub(/.*vapidssl\//, '')
date = Time.now.strftime("%m/%d/%Y")
Dir.chdir(ARGV[0]) do
  ALGS.each do |data_file, hash|
    File.open(data_file, 'w') do |f|
      f.puts "# This file was auto-generated by #{tool} on #{date}"
      f.puts
      # Generate a bunch of digests iteratively
      data = ''
      32.times do
        digest = hash.hexdigest(data)
        f.puts "IN: " + data.unpack('H*')[0]
        f.puts "DIGEST: " + digest
        f.puts
        data += hash.digest(data)
      end
    end
  end
end
