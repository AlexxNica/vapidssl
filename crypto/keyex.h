// Copyright 2016 The Fuchsia Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef VAPIDSSL_CRYPTO_KEYEX_H
#define VAPIDSSL_CRYPTO_KEYEX_H
#ifdef __cplusplus
extern "C" {
#endif  // __cplusplus

#include <stddef.h>
#include <stdint.h>

#include "base/buf.h"
#include "public/error.h"

// The KEYEX structure represents a wrapper around a cryptographic key exchange
// algorithm.  The generic key exchange has three phases:
//    - A server generates some secret and an |offer|.  It sends the latter to
//      the client.
//    - The client decides whether to |accept| that offer.  If it does, it can
//      use the |offer| to produce both an acceptance and a |shared| secret.  It
//      sends the acceptance back tot the server.
//    - The server receives the acceptance which it uses along with the secret
//      corresponding to its offer to produce the same shared secret.
//
// A wrapper for a specific crypto library must implement the details of the
// KEYEX structure as documented in keyex_internal.h, and
// |keyex_find|.  All other
// functions in this file are generic and implemented by keyex.c.

// Supported key exchange algorithms.  These should correspond to the
// ciphersuites enumerated by |tls_ciphersuite_t|. 0 is avoided to require
// |keyex_t| fields to be explicitly set.
typedef enum keyex_t {
  kKeyxECDHE = 1,
} keyex_t;
#define VAPIDSSL_KEYEXS 1

// Key exchange algorithm structure, defined in crypto/keyex_internal.h.
typedef struct keyex_st KEYEX;

// keyex_find takes an |algorithm| and an |eccurve| and returns a pointer to the
// matching key exchange algorithm, or NULL if the |algorithm| or |eccurve| are
// unrecognized.  |eccurve| may be the special value |kCryptoAny|.
const KEYEX *keyex_find(uint16_t algorithm, uint16_t eccurve);

// keyex_get_offer_size returns the maximum length in bytes of a server's key
// exchange offer.
size_t keyex_get_offer_size(const KEYEX *keyex);

// keyex_get_accept_size returns the maximum length in bytes of an acceptance
// message generated by this key exchange in response to an offer from a server.
size_t keyex_get_accept_size(const KEYEX *keyex);

// keyex_get_output_size returns the length in bytes of the shared key generated
// by this key exchange as a result of an accepted offer.
size_t keyex_get_output_size(const KEYEX *keyex);

// keyex_accept takes an |offer| from a server, and uses it to generate an
// |acceptance|, which it can send back to the server, and a |shared| secret,
// which the server can derive from the |acceptance|.
tls_result_t keyex_accept(const KEYEX *self, BUF *region, BUF *offer,
                          BUF *out_acceptance, BUF *out_shared);

#ifdef __cplusplus
}
#endif  // __cplusplus
#endif  // VAPIDSSL_CRYPTO_KEYEX_H
