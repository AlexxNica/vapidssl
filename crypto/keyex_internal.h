// Copyright 2016 The Fuchsia Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef VAPIDSSL_CRYPTO_KEYEX_INTERNAL_H
#define VAPIDSSL_CRYPTO_KEYEX_INTERNAL_H
#ifdef __cplusplus
extern "C" {
#endif  // __cplusplus

#include <stddef.h>
#include <stdint.h>

#include "base/buf.h"
#include "public/error.h"

// keyex_st associates an |id| with the various parameters needed for a
// key
// exchange algorithm, as well as function pointers for generating an ephemeral
// key pair and computing a shared secret.
struct keyex_st {
  // algorithm identifies this key exchange algorithm, and should match a value
  // of |keyex_t| in config.h.
  uint16_t algorithm;
  // eccurve identifies a the elliptic curve being used for this key exchange
  // algorithm. It should match a value of |tls_eccurve_t| in config.h.
  uint16_t eccurve;
  // secret_size is the length in bytes of the secret generated by this key
  // exchange.
  size_t secret_size;
  // offer_size is the maximum length in bytes of an offer message generated by
  // this key exchange.
  size_t offer_size;
  // accept_size is the maximum length in bytes of an acceptance message
  // generated by this key exchange.
  size_t accept_size;
  // output_size is the length in bytes of the shared key generated by this key
  // exchange.
  size_t output_size;
  // accept takes an |offer| from a server, and uses it to generate an
  // |acceptance|, which it can send back to the server, and a |shared| secret,
  // which the server can derive from the |acceptance|.
  tls_result_t (*accept)(const struct keyex_st *keyex, uint8_t *secret,
                         uint8_t *offer, uint8_t *acceptance, uint8_t *shared);
};

#ifdef __cplusplus
}
#endif  // __cplusplus
#endif  // VAPIDSSL_CRYPTO_KEYEX_INTERNAL_H
