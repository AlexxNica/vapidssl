// Copyright 2016 The Fuchsia Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef VAPIDSSL_TLS1_2_CIPHERSUITE_H
#define VAPIDSSL_TLS1_2_CIPHERSUITE_H
#ifdef __cplusplus
extern "C" {
#endif  // __cplusplus

#include "crypto/aead.h"
#include "crypto/hash.h"
#include "crypto/keyex.h"
#include "crypto/sign.h"

// ciphersuite.h - Ciphersuite algorithms.
//
// At the public API level, VapidSSL consumers only need to specify ciphersuites
// as enumerated by |tls_ciphersuite_t|.  VapidSSL maintains a clear delineation
// between protocol constructions and cryptographic primitives, with the latter
// being provided by specific implementations and abstracted behind the adapter
// layer described in the above headers.  This header file lists exactly which
// algorithms are available and provides a mapping for the API enumeration to
// the provider's algorithms. Extra care should be taken to ensure consistency
// between this file, the crypto provider, and the public API.

// ciphersuite_next returns another ciphersuite that is:
//    - Distinct from |ciphersuite|
//    - Supported, i.e. |ciphersuite_is_supported| would return |kTrue|
//    - Enabled in |config|, i.e. |config_has_ciphersuite| would return |kTrue|
//
// |ciphersuite| may be |kCryptoAny|.  If every ciphersuite has been returned,
// it returns |kCryptoAny|.  |ciphersuite_next| can be used to enumerate the
// supported and enabled ciphersuites as follows:
//   for (tls_ciphersuite_t ciphersuite = kCryptoAny;
//        ciphersuite != kCryptoAny;
//        ciphersuite = ciphersuite_next(ciphersuite));
tls_ciphersuite_t ciphersuite_next(const TLS_CONFIG *config,
                                   tls_ciphersuite_t ciphersuite);

// ciphersuite_is_supported returns whether all the algorithms associated with
// |ciphersuite| are supported.  If any are not supported, it returns |kFalse|.
// See also |aead_find|, |hash_find|, |keyex_find|, and |sign_find|.
bool_t ciphersuite_is_supported(tls_ciphersuite_t ciphersuite);

// ciphersuite_get_aead returns the AEAD algorithm associated with
// |ciphersuite|.  See also |aead_find|.
const AEAD *ciphersuite_get_aead(tls_ciphersuite_t ciphersuite);

// ciphersuite_get_hash returns the hash algorithm associated with
// |ciphersuite|.  See also |hash_find|.
const HASH *ciphersuite_get_hash(tls_ciphersuite_t ciphersuite);

// ciphersuite_get_keyex returns the key exchange algorithm associated with
// |ciphersuite| and |eccurve|.  See also |keyex_find|.
const KEYEX *ciphersuite_get_keyex(tls_ciphersuite_t ciphersuite,
                                   tls_eccurve_t eccurve);

// ciphersuite_xor_nonce returns whether |ciphersuite|'s is generated by
// exclusive-ORing the fixed and variable nonces or not.  If not, it is
// generated by concatenating the fixed and variablke nonces.
bool_t ciphersuite_xor_nonce(tls_ciphersuite_t ciphersuite);

// ciphersuite_fix_nonce_length returns the length of the fixed nonce for
// |ciphersuite|.
size_t ciphersuite_fix_nonce_length(tls_ciphersuite_t ciphersuite);

// ciphersuite_var_nonce_length returns the length of the variable nonce for
// |ciphersuite|.
size_t ciphersuite_var_nonce_length(tls_ciphersuite_t ciphersuite);

// ciphersuite_get_signature_algorithm returns the two byte value represents the
// SignatureAndHashAlgorithm associated with |ciphersuite|, as defined in
// https://tools.ietf.org/html/rfc5246#section-7.4.1.4.1
uint16_t ciphersuite_get_signature_algorithm(tls_ciphersuite_t ciphersuite);

// ciphersuite_get_verify_length returns the length of the "verify_data" field
// of the Finished message for |ciphersuite|, as described in
// https://tools.ietf.org/html/rfc5246#section-7.4.9
size_t ciphersuite_get_verify_length(tls_ciphersuite_t ciphersuite);


#ifdef __cplusplus
}
#endif  // __cplusplus
#endif  // VAPIDSSL_TLS1_2_CIPHERSUITE_H
